swagger: "2.0"
info:
  description: "Bike shop application"
  version: "1.0.0"
  title: "Bike shop"
host: "bikeshop.swagger.io"
basePath: "/v2"
tags:
  - name: "order"
schemes:
  - "https"
  - "http"
paths:
  /product:
    post:
      tags:
        - "product"
      summary: "Add a new product"
      description: "Add a new product"
      operationId: "addProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "An product body that need to be created"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "201":
          schema:
            type: "string"
            format: "uuid"
          description: "successful operation"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      tags:
        - "product"
      summary: "Get all products"
      description: "Get all products"
      operationId: "getProducts"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "search"
          description: "Query product by name"
          type: string
          required: true
        - in: "query"
          name: "sortBy"
          description: "Sort product by field"
          type: string
          required: true
        - in: "query"
          name: "sortType"
          description: "Sort product type"
          type: string
          required: true
        - in: "query"
          name: "page"
          description: "Page number of product"
          type: "integer"
          format: "int64"
          required: true
        - in: "query"
          name: "limit"
          description: "Page size of product"
          type: "integer"
          format: "int64"
          required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProductResponse"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /product/{productId}:
    get:
      tags:
        - "product"
      summary: "Get an product by Id"
      description: ""
      operationId: "getProductById"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "productId"
          description: "Id of an product"
          type: string
          format: "uuid"
          required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProductResponse"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - "product"
      summary: "Delete an product by Id"
      description: "Delete an product by Id"
      operationId: "deleteProductById"
      parameters:
        - in: "path"
          name: "productId"
          description: "Id of an product"
          type: string
          format: "uuid"
          required: true
      responses:
        "200":
          description: "successful operation"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - "product"
      summary: "Update an product by Id"
      description: "Update an product by Id"
      operationId: "updateProductById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "productId"
          description: "Id of an product"
          type: string
          format: "uuid"
          required: true
        - in: "body"
          name: "body"
          description: "An product body that need to be updated"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          schema:
            $ref: "#/definitions/Product"
          description: "successful operation"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /order:
    post:
      tags:
        - "order"
      summary: "Add a new order"
      description: "Add a new order"
      operationId: "addOrder"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "An order body that need to be created"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "201":
          description: "successful operation"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      tags:
        - "order"
      summary: "Get all orders"
      description: "Get all orders"
      operationId: "getOrders"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrderResponse"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /order/{orderId}:
    get:
      tags:
        - "order"
      summary: "Get an order by Id"
      description: ""
      operationId: "getOrderById"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "path"
          name: "orderId"
          description: "Id of an order"
          type: string
          format: "uuid"
          required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/OrderResponse"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - "order"
      summary: "Delete an order by Id"
      description: "Delete an order by Id"
      operationId: "deleteOrderById"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "path"
          name: "orderId"
          description: "Id of an order"
          type: string
          format: "uuid"
          required: true
      responses:
        "200":
          description: "successful operation"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - "order"
      summary: "Update an order by Id"
      description: "Update an order by Id"
      operationId: "updateOrderById"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "path"
          name: "orderId"
          description: "Id of an order"
          type: string
          format: "uuid"
          required: true
        - in: "body"
          name: "body"
          description: "An order body that need to be updated"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/OrderResponse"
        "400":
          description: "bad request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
definitions:
  Order:
    type: "object"
    properties:
      customerName:
        type: "string"
      customerPhoneNumber:
        type: "string"
      code:
        type: "string"
      total:
        type: "integer"
        format: "int32"
      productList:
        type: "array"
        items:
          $ref: "#/definitions/ProductResponse"
    xml:
      name: "Order"
  OrderResponse:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      customerName:
        type: "string"
      customerPhoneNumber:
        type: "string"
      code:
        type: "string"
      total:
        type: "integer"
        format: "int32"
      productList:
        type: "array"
        items:
          $ref: "#/definitions/ProductResponse"
    xml:
      name: "Order"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Product:
    type: "object"
    properties:
      name:
        type: "string"
      quantity:
        type: "integer"
        format: "int64"
      price:
        type: "integer"
        format: "int64"
    xml:
      name: "Product"
  ProductResponse:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      quantity:
        type: "integer"
        format: "int64"
      price:
        type: "integer"
        format: "int64"
    xml:
      name: "ProductResponse"
  ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
      message:
        type: "string"
